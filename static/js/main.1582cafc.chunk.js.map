{"version":3,"sources":["DollHouseBoard.js","App.js","serviceWorker.js","index.js"],"names":["CARDS","id","name","w","h","DollHouseBoard","e","x","clientX","y","clientY","C","Math","floor","R","console","log","this","props","moves","clickCell","cn","clickCard","isActive","mouseOver","G","cells","reserve","ctx","gameover","undefined","winner","itens","map","r","k","key","style","width","height","left","c","top","backgroundColor","color","className","cards","onClick","onCardClick","ROWS","React","Component","DollHouse","Game","setup","Array","fill","pivot","sw","sh","Object","assign","scolor","card","push","App","Client","game","board","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1582cafc.chunk.js","sourcesContent":["import React from 'react';\nimport \"./DollHouseBoard.css\";\n\nexport const CARDS = [\n    { id: 0, name: \"permit\", w: 12, h: 9 },\n\n    { id: 1, name: \"roof\", w: 3, h: 1 },\n    { id: 2, name: \"small-room\", w: 3, h: 3 },\n    { id: 3, name: \"medium-room\", w: 5, h: 3 },\n    { id: 4, name: \"big-room\", w: 7, h: 3 },\n    { id: 5, name: \"tall-room\", w: 3, h: 6 },\n    { id: 6, name: \"doll\", w: 1, h: 2 },\n\n    { id: 7, name: \"toilet\", w: 1, h: 1 },\n    { id: 8, name: \"shower\", w: 1, h: 3 },\n    \n    { id: 9, name: \"bed\", w: 3, h: 6 },\n    { id: 10, name: \"tv\", w: 1, h: 1 },\n\n    { id: 11, name: \"coach\", w: 3, h: 1 },\n    { id: 12, name: \"table\", w: 3, h: 2 },\n    { id: 13, name: \"big-tv\", w: 2, h: 1 },\n\n    { id: 14, name: \"stove\", w: 2, h: 2 },\n    { id: 15, name: \"kitchen-table\", w: 2, h: 2 },\n\n    { id: 16, name: \"bench\", w: 2, h: 1 },\n    { id: 17, name: \"plant\", w: 1, h: 2 },\n    { id: 18, name: \"painting\", w: 1, h: 1 },\n\n\n\n\n    \n    \n];\n\n\nexport const [ROWS, COLS, SIZE] = [11, 12, 40];\nexport default class DollHouseBoard extends React.Component {\n    onClick(e) {\n        const x = e.clientX;\n        const y = e.clientY;\n        const C = Math.floor(x / SIZE);\n        const R = Math.floor(y / SIZE);\n        console.log(\"onclick\", x, y, R, C);\n        this.props.moves.clickCell(R, C);\n    }\n\n    onCardClick(cn) {\n        this.props.moves.clickCard(cn);\n    }\n\n    onMouseMove(id) {\n        if (this.isActive(id)) {\n            this.props.moves.mouseOver(id);\n        }\n    }\n\n\n    isActive(id) {\n        if (!this.props.isActive) return false;\n        if (this.props.G.cells[id] !== 0) return false;\n        return true;\n    }\n\n    render() {\n        console.log(this.props.G.reserve);\n        \n        let winner = '';\n        if (this.props.ctx.gameover) {\n            winner =\n                this.props.ctx.gameover.winner !== undefined ? (\n                    <div id=\"winner\">Winner: {this.props.ctx.gameover.winner}</div>\n                ) : (\n                        <div id=\"winner\">Draw!</div>\n                    );\n        }\n        let itens =\n            this.props.G.reserve.map((r, k) => <div key={\"room\" + k} style={{\n                width: (r.w * SIZE - 8) + \"px\",\n                height: (r.h * SIZE - 8) + \"px\",\n                left: (r.c * SIZE - 8) + \"px\",\n                top: (r.r * SIZE - 8) + \"px\",\n                backgroundColor: r.color,\n            }} className={`room ${r.name}`}></div>);\n\n        let cards = CARDS.map((c, k) => <div className=\"card\" key={\"card\" + c.id + k} onClick={() => { this.onCardClick(c.id) }}>{c.id} {c.name}</div>)\n\n\n\n        return (\n            <div>\n                <div id=\"board\" style={{ width: (COLS+2) * SIZE, height: ROWS * SIZE }} onClick={(e) => { this.onClick(e) }}>\n                    {itens}\n                </div>\n                &rarr; {cards[this.props.G.cn]}\n                <div id=\"cards\">\n                    {cards}\n                </div>\n            </div>\n        );\n    }\n}","import { Client } from 'boardgame.io/react';\nimport { Game } from 'boardgame.io/core';\nimport DollHouseBoard, { ROWS, COLS, SIZE, CARDS } from \"./DollHouseBoard\";\n\n\nconst DollHouse = Game({\n  setup: () => ({\n    cells: Array(ROWS * COLS).fill((0)),\n    pivot: null,\n    sw: 3,\n    sh: 3,\n    cn: 2,\n    reserve: [Object.assign({c:1, r:2},CARDS[0])],\n    scolor: \"lightpink\"\n  }),\n\n  moves: {\n    clickCell(G, ctx, R, C) {\n      const card = Object.assign({r: R-CARDS[G.cn].h+1, c:C}, CARDS[G.cn]);\n      console.log(\"clickcell\",CARDS[G.cn], card);\n      console.log(R,C);\n      G.reserve.push( card);\n    },\n    clickCard(G, ctx, cn) {\n      G.cn = cn;\n    }\n  },\n});\n\nconst App = Client({ game: DollHouse, board: DollHouseBoard });\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}