{"version":3,"sources":["dollhouse-and-write.png","Card.js","DollHouseBoard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","selected","onClick","onCardSelect","card","name","w","h","CARDS","id","DollHouseBoard","e","rect","currentTarget","getBoundingClientRect","x","clientX","left","y","clientY","top","console","log","pageX","offsetX","C","Math","floor","R","this","moves","clickCell","cn","clickCard","selectCard","isActive","mouseOver","G","cells","ctx","gameover","undefined","winner","itens","reserve","map","r","k","key","style","width","height","c","backgroundColor","color","cards","onCardClick","src","logo","alt","card1","cardSelected","card2","card3","ROWS","React","Component","DollHouse","Game","setup","Array","fill","pivot","sw","sh","deck","from","keys","i","discard","Object","assign","scolor","push","s","App","Client","game","board","debug","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.954ceab6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dollhouse-and-write.4b9cffc9.png\";","import React from \"react\";\nimport \"./Card.css\";\n\nexport default function Card(props) {\n    return(\n    <div className={\"card \"+(props.selected?\"selected\":\"\")} onClick={props.onCardSelect}>\n        <div>{props.card.name}</div>\n        <div>{props.card.w} X {props.card.h}</div>\n    </div>);\n}","import React from 'react';\nimport Card from \"./Card\";\nimport \"./DollHouseBoard.css\";\nimport logo from \"./dollhouse-and-write.png\";\n\nexport const CARDS = [\n    { id: 0, name: \"permit\", w: 12, h: 9 },\n\n    { id: 1, name: \"roof\", w: 3, h: 1 },\n    { id: 2, name: \"small-room\", w: 3, h: 3 },\n    { id: 3, name: \"medium-room\", w: 5, h: 3 },\n    { id: 4, name: \"big-room\", w: 7, h: 3 },\n    { id: 5, name: \"tall-room\", w: 3, h: 6 },\n    { id: 6, name: \"doll\", w: 1, h: 2 },\n\n    { id: 7, name: \"toilet\", w: 1, h: 1 },\n    { id: 8, name: \"shower\", w: 1, h: 3 },\n    { id: 9, name: \"bathtub\", w: 3, h: 1 },\n\n    { id: 10, name: \"bed\", w: 3, h: 1 },\n    { id: 11, name: \"tv\", w: 1, h: 1 },\n\n    { id: 12, name: \"coach\", w: 3, h: 1 },\n    { id: 13, name: \"table\", w: 3, h: 2 },\n    { id: 14, name: \"big-tv\", w: 2, h: 1 },\n\n    { id: 15, name: \"stove\", w: 2, h: 2 },\n    { id: 16, name: \"kitchen-table\", w: 2, h: 2 },\n\n    { id: 16, name: \"bench\", w: 2, h: 1 },\n    { id: 17, name: \"plant\", w: 1, h: 2 },\n    { id: 18, name: \"painting\", w: 1, h: 1 },\n\n\n\n\n\n\n];\n\n\nexport const [ROWS, COLS, SIZE] = [11, 12, 40];\nexport default class DollHouseBoard extends React.Component {\n    onClick(e) {\n        const rect = e.currentTarget.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        console.log(\"click>\", rect, e.pageX, e.clientX, e.offsetX);\n\n        const C = Math.floor(x / SIZE);\n        const R = Math.floor(y / SIZE);\n        console.log(\"onclick\", x, y, R, C);\n        this.props.moves.clickCell(R, C);\n    }\n\n    onCardClick(cn) {\n        this.props.moves.clickCard(cn);\n    }\n\n    onCardSelect(cn) {\n        console.log('onCardSelect', cn);\n        this.props.moves.selectCard(cn);\n    }\n    onMouseMove(id) {\n        if (this.isActive(id)) {\n            this.props.moves.mouseOver(id);\n        }\n    }\n\n\n    isActive(id) {\n        if (!this.props.isActive) return false;\n        if (this.props.G.cells[id] !== 0) return false;\n        return true;\n    }\n\n    render() {\n        let winner = '';\n        if (this.props.ctx.gameover) {\n            winner =\n                this.props.ctx.gameover.winner !== undefined ? (\n                    <div id=\"winner\">Winner: {this.props.ctx.gameover.winner}</div>\n                ) : (\n                        <div id=\"winner\">Draw!</div>\n                    );\n        }\n        let itens =\n            this.props.G.reserve.map((r, k) => <div key={\"room\" + k} style={{\n                width: (r.w * SIZE - 8) + \"px\",\n                height: (r.h * SIZE - 8) + \"px\",\n                left: (r.c * SIZE - 8) + \"px\",\n                top: (r.r * SIZE - 8) + \"px\",\n                backgroundColor: r.color,\n            }} className={`room ${r.name}`}></div>);\n\n        let cards = CARDS.map((c, k) => (\n            <div className=\"card\" key={\"card\" + c.id + k} onClick={() => { this.onCardClick(c.id) }}>\n                <div>{c.id}</div>\n                <div>{c.name}</div>\n                <div>{c.w}x{c.h}</div>\n            </div>\n        ));\n\n\n\n        return (\n            <div id=\"dollhouse-game\">\n                <img id=\"logo\" src={logo} alt=\"Dollhouse & Write\" height=\"180\" />\n                <div id=\"cardroll\">\n                    <Card card={CARDS[this.props.G.card1]} onCardSelect={() => {this.onCardSelect(0) }} selected={this.props.G.cardSelected === 0} />\n                    <Card card={CARDS[this.props.G.card2]} onCardSelect={() => { this.onCardSelect(1) }} selected={this.props.G.cardSelected === 1} />\n                    <Card card={CARDS[this.props.G.card3]} onCardSelect={() => { this.onCardSelect(2) }} selected={this.props.G.cardSelected === 2} />\n                </div>\n                <div id=\"paper\" style={{ width: (COLS + 2) * SIZE, height: ROWS * SIZE }}>\n                    <div id=\"board\" style={{ width: (COLS + 2) * SIZE, height: ROWS * SIZE }} onClick={(e) => { this.onClick(e) }}>\n                        {itens}\n                    </div>\n                </div>\n                <div id=\"scoresheet\">\n                    <div>Bed Room</div>\n                    <div>Kitchen</div>\n                    <div>Bathroom</div>\n                </div>\n                <div id=\"cardselector\">\n                    {cards[this.props.G.cn]}\n                    {cards}\n                </div>\n            </div>\n        );\n    }\n}","import { Client } from 'boardgame.io/react';\nimport { Game } from 'boardgame.io/core';\nimport DollHouseBoard, { ROWS, COLS, SIZE, CARDS } from \"./DollHouseBoard\";\n\n\nconst DollHouse = Game({\n  setup: () => ({\n    cells: Array(ROWS * COLS).fill((0)),\n    pivot: null,\n    sw: 3,\n    sh: 3,\n    cn: 2,\n    cardSelected: 0,\n    card1: 0,\n    card2: 1,\n    card3: 2,\n    deck: Array.from(Array(10).keys()).map(i => i + 3),\n    discard: [],\n    reserve: [Object.assign({ c: 1, r: 2 }, CARDS[0])],\n    scolor: \"lightpink\"\n  }),\n\n  moves: {\n    clickCell(G, ctx, R, C) {\n      const card = Object.assign({ r: R - CARDS[G.cn].h + 1, c: C }, CARDS[G.cn]);\n      console.log(\"clickcell\", CARDS[G.cn], card);\n      console.log(R, C);\n      G.reserve.push(card);\n    },\n    clickCard(G, ctx, cn, s = 0) {\n      G.cn = cn;\n    },\n    selectCard(G, ctx, s = 0) {\n      G.cardSelected = s;\n      switch (s) {\n        case 0:\n          G.cn = G.card1;\n          break;\n        case 1:\n          G.cn = G.card2;\n          break;\n        case 2:\n          G.cn = G.card3;\n          break;\n        default:\n            G.cardSelected = 1;\n            G.cn = G.card1;\n          break;\n      }\n      console.log('select', G.cn);\n    }\n\n  },\n});\n\nconst App = Client({ game: DollHouse, board: DollHouseBoard, debug: false });\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}